name: Cascade Build Reporter
description: "Trigger Resource from Main and report back statuses using same context/SHA."
author: Liviu Tomoiaga <Liviu.Tomoiaga@analog.com>
inputs:
  op:
    description: "Operation: trigger | report"
    required: true
  # Common knobs
  status_context:
    description: "Commit status context used on both ends"
    required: false
    default: "adi/resource/build"

  # --- trigger op inputs (used by Main) ---
  status_state:
    description: "Pre-status for Resource on Main (pending|success|failure)"
    required: false
    default: "pending"
  resource_owner:
    description: "Owner/org of the Resource repo"
    required: false
  resource_repo:
    description: "Name of the Resource repo"
    required: false
  resource_event_type:
    description: "repository_dispatch type"
    required: false
    default: "adi-resource-trigger"
  artifact_name:
    description: "Artifact produced by Main for Resource"
    required: false
  resource_repo_branch:
    description: "Target branch to build for repository dispatched"
    required: true
  github_token:
    description: "Token with permissions (contents:write, statuses:write)"
    required: false

  # --- report op inputs (used by Resource) ---
  report_state:
    description: "Status to report back (success|failure|error|pending)"
    required: false
    default: "success"
  report_description:
    description: "Status description to show in Main"
    required: false
    default: "Resource build result"
  report_target_url:
    description: "URL to link from the status (usually this run URL)"
    required: false
    default: ""
  status_pat:
    description: "Fine-grained PAT to write statuses on Main repo"
    required: false

runs:
  using: "composite"
  steps:
  - name: Compute meta (always)
    id: meta
    shell: bash
    run: |
      echo "sha=${GITHUB_SHA}" >> "$GITHUB_OUTPUT"
      echo "run_id=${GITHUB_RUN_ID}" >> "$GITHUB_OUTPUT"
      echo "repo=${GITHUB_REPOSITORY#*/}" >> "$GITHUB_OUTPUT"
      echo "owner=${GITHUB_REPOSITORY%/*}" >> "$GITHUB_OUTPUT"

  - name: Assert op
    if: ${{ inputs.op == '' }}
    shell: bash
    run: |
      echo "::error ::'op' input is required (trigger|report)"
      exit 1
  - name: Echo input parameters
    shell: bash
    run: |
      echo "owner: $(echo $GITHUB_REPOSITORY | cut -d'/' -f1)"
      echo "repo: $(echo $GITHUB_REPOSITORY | cut -d'/' -f2)"
      echo "sha: $GITHUB_SHA"
      echo "state: ${{ inputs.status_state }}"
      echo "context: ${{ inputs.status_context }}"
      echo "description: Resource build is ${{ inputs.status_state }}."
      echo "target_url: https://github.com/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID"

    # ---------- op=trigger ----------         
  - name: Trigger Repo Slave via repository_dispatch
    uses: peter-evans/repository-dispatch@v3
    with:
      token: ${{ inputs.github_token }}
      repository: ${{ inputs.resource_owner }}/${{ inputs.resource_repo }}
      event-type: ${{ inputs.resource_event_type }}
      client-payload: |
        {
          "source_repo":"${{ github.repository }}",
          "source_run_id":"${{ github.run_id }}",
          "source_sha":"${{ github.sha }}",
          "artifact_name": "${{ inputs.artifact_name }}",
          "target_branch_b": "${{ inputs.resource_repo_branch }}"
        }
  - name: Set main pre-status
    if: ${{ inputs.op == 'trigger' }}
    shell: bash
    run: |
      echo "https://api.github.com/repos/$GITHUB_REPOSITORY/statuses/$GITHUB_SHA"
      curl -sS -X POST \
          -H "Accept: application/vnd.github.v3+json" \
          -H "Authorization: Bearer ${{ inputs.github_token }}" \
          "https://api.github.com/repos/$GITHUB_REPOSITORY/statuses/$GITHUB_SHA" \
          -d "{
          \"state\":\"${{ inputs.status_state }}\",
          \"context\":\"${{ inputs.status_context }}\",
          \"target_url\":\"https://github.com/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID\",
          \"description\":\"Resource repo build is ${{ inputs.status_state }}\"}"     
    # ---------- op=report ----------
  - name: Extract payload (for report)
    if: ${{ inputs.op == 'report' }}
    id: payload
    shell: bash
    run: |
      set -euo pipefail
      # Pull from the client payload sent by Master
      echo "source_repo=${{ github.event.client_payload.source_repo }}"     >> "$GITHUB_OUTPUT"
      echo "source_run_id=${{ github.event.client_payload.source_run_id }}" >> "$GITHUB_OUTPUT"
      echo "source_sha=${{ github.event.client_payload.source_sha }}"       >> "$GITHUB_OUTPUT"
      echo "artifact_name=${{ github.event.client_payload.artifact_name }}" >> "$GITHUB_OUTPUT"
      echo "target_branch_b=${{ github.event.client_payload.target_branch_b }}" >> "$GITHUB_OUTPUT"

      # Minimal validation
      for k in source_repo source_run_id source_sha artifact_name target_branch_b; do
        v=$(grep "^$k=" "$GITHUB_OUTPUT" | sed "s/^$k=//")
        if [[ -z "$v" ]]; then
          echo "::error title=Missing payload field::$k was not provided in repository_dispatch payload."
          exit 1
        fi
      done

  - name: Post status to Main
    if: ${{ inputs.op == 'report' }}
    shell: bash
    env:
      GH_PAT: ${{ inputs.status_pat }}
    run: |
      set -euo pipefail
      curl -sS -X POST \
        -H "Accept: application/vnd.github.v3+json" \
        -H "Authorization: Bearer ${{ secrets.GIT_TOKEN  }}" \
        "https://api.github.com/repos/${{ steps.payload.outputs.source_repo }}/statuses/${{ steps.payload.outputs.source_sha }}" \
        -d "{
          \"state\": \"${{ inputs.report_state }}\",
          \"context\":\"Repo Slave: build on (${{ steps.payload.outputs.target_branch_b }})\",
          \"target_url\": \"${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}\",
          \"description\": \"cB build passed\"
        }"
