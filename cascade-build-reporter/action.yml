name: Cascade Build Reporter
description: "Trigger Worker repository from Orchestrator repository and report back statuses using same context/SHA."
author: Liviu Tomoiaga <Liviu.Tomoiaga@analog.com>
inputs:
  op:
    description: "Operation: trigger | report"
    default: ""
    required: true
  # Common knobs
  status_context:
    description: "Commit status context used on both ends"
    required: true
    default: "adi-worker-build"

  # --- trigger op inputs (used by Orchestrator ) ---
  status_state:
    description: "Pre-status for Worker on Orchestrator  (pending|success|failure)"
    required: true
  worker_owner:
    description: "Owner/org of the Worker repo"
    required: true
  worker_repo:
    description: "Name of the Worker repo"
    required: true
  worker_event_type:
    description: "repository_dispatch type"
    required: true
    default: "adi-worker-trigger"
  artifact_name:
    description: "Artifact produced by Orchestrator  for Worker"
    required: true
  worker_repo_branch:
    description: "Target branch to build for repository dispatched"
    required: true
  github_token:
    description: "Token with permissions (contents:write, statuses:write)"
    required: true

  # --- report op inputs (used by Worker) ---
  report_state:
    description: "Status to report back (success|failure|error|pending)"
    required: true
  report_description:
    description: "Status description to show in Orchestrator "
    required: false
    default: "Worker build result"
  report_target_url:
    description: "URL to link from the status (usually this run URL)"
    required: true
  status_pat:
    description: "Fine-grained PAT to write statuses on Orchestrator  repo"
    required: true

runs:
  using: "composite"
  steps:
  # ---------- OS Validation ----------
  - name: Check for Windows OS
    if: ${{ runner.os == 'Windows' }}
    shell: cmd
    run: |
      echo "This action only supports Linux-based runners."
      exit 1
    # ---------- op=trigger ----------         
  - name: Trigger Worker Repo via repository_dispatch
    if: ${{ inputs.op == 'trigger' }}
    uses: peter-evans/repository-dispatch@ff45666b9427631e3450c54a1bcbee4d9ff4d7c0 #tag: v3
    with:
      token: ${{ inputs.github_token }}
      repository: ${{ inputs.worker_owner }}/${{ inputs.worker_repo }}
      event-type: ${{ inputs.worker_event_type }}
      client-payload: |
        {
          "source_repo":"${{ github.repository }}",
          "source_run_id":"${{ github.run_id }}",
          "source_sha":"${{ github.sha }}",
          "artifact_name": "${{ inputs.artifact_name }}",
          "target_branch_b": "${{ inputs.worker_repo_branch }}"
        }
  - name: Post Status using post_status.sh
    if: ${{ inputs.op == 'trigger' }}
    shell: bash
    run: |
      chmod +x ${GITHUB_ACTION_PATH}/post_status.sh
      ${GITHUB_ACTION_PATH}/post_status.sh \
        --repo "$GITHUB_REPOSITORY" \
        --sha "$GITHUB_SHA" \
        --state "${{ inputs.status_state }}" \
        --context "${{ inputs.status_context }}" \
        --target_url "${{ github.server_url }}/${{ inputs.worker_owner }}/${{ inputs.worker_repo }}/actions" \
        --description "Worker repo build is ${{ inputs.status_state }}" \
        --token "${{ inputs.github_token }}"
    
    # ---------- op=report ----------
  - name: Extract payload (for report)
    if: ${{ inputs.op == 'report' }}
    id: payload
    shell: bash
    run: |
      set -euo pipefail
      # Pull from the client payload sent by Master
      echo "source_repo=${{ github.event.client_payload.source_repo }}"     >> "$GITHUB_OUTPUT"
      echo "source_run_id=${{ github.event.client_payload.source_run_id }}" >> "$GITHUB_OUTPUT"
      echo "source_sha=${{ github.event.client_payload.source_sha }}"       >> "$GITHUB_OUTPUT"
      echo "artifact_name=${{ github.event.client_payload.artifact_name }}" >> "$GITHUB_OUTPUT"
      echo "target_branch_b=${{ github.event.client_payload.target_branch_b }}" >> "$GITHUB_OUTPUT"

      # Minimal validation
      for k in source_repo source_run_id source_sha artifact_name target_branch_b; do
        v=$(grep "^$k=" "$GITHUB_OUTPUT" | sed "s/^$k=//")
        if [[ -z "$v" ]]; then
          echo "::error title=Missing payload field::$k was not provided in repository_dispatch payload."
          exit 1
        fi
      done

  - name: Post status to Orchestrator using post_status.sh
    if: ${{ inputs.op == 'report' }}
    shell: bash
    env:
      GH_PAT: ${{ inputs.status_pat }}
    run: |
      set -euo pipefail
      chmod +x ${GITHUB_ACTION_PATH}/post_status.sh
      ${GITHUB_ACTION_PATH}/post_status.sh \
        --repo "${{ steps.payload.outputs.source_repo }}" \
        --sha "${{ steps.payload.outputs.source_sha }}" \
        --state "${{ inputs.report_state }}" \
        --context "${{ inputs.status_context }}" \
        --target_url "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" \
        --description "${{ inputs.report_description }}" \
        --token "$GH_PAT"
